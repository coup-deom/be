version: '3'

services:
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - springboot
    networks:
      - frontend-network-d
    restart: always

  springboot:
#    build:
#      context: .
#      dockerfile: ./docker/spring/Dockerfile
    image: ${DOCKER_USERNAME}/deom:${DOCKER_TAG}
    expose:
      - "8080"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - LOG_LEVEL=${LOG_LEVEL}
      - APP_LOG_LEVEL=${APP_LOG_LEVEL}
      - SECURITY_LOG_LEVEL=${SECURITY_LOG_LEVEL}
      - WEB_LOG_LEVEL=${WEB_LOG_LEVEL}
      - SERVER_PORT=${SERVER_PORT}
      - NGINX_HTTP_PORT=${NGINX_HTTP_PORT}
      - NGINX_HTTPS_PORT=${NGINX_HTTPS_PORT}
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${DB_USERNAME}
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      - postgres
    networks:
      - frontend-network-d
      - backend-network-d
    restart: always

  postgres:
    image: postgres:17-alpine
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    networks:
      - backend-network-d
    restart: always

networks:
  frontend-network-d:
  backend-network-d:
    internal: true

volumes:
  postgres-data:
